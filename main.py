import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters

from flask import Flask
from threading import Thread


TOKEN = "7503402744:AAF7MWB0x_6Eh7AwE3GLdmGLuxkpottqt4s"
OWNER_ID = 7397365971
PDF_FILE_PATH = "book.pdf"

logging.basicConfig(level=logging.INFO)

# üì• –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def save_user_id(user_id):
    try:
        with open("users.txt", "r+") as f:
            ids = set(f.read().splitlines())
            if str(user_id) not in ids:
                f.write(str(user_id) + "\n")
    except FileNotFoundError:
        with open("users.txt", "w") as f:
            f.write(str(user_id) + "\n")

# üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu(is_admin=False):
    buttons = [
        [InlineKeyboardButton("üìò –û –∫–Ω–∏–≥–µ", callback_data="about")],
        [InlineKeyboardButton("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è", callback_data="robot")],
        [InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –∑–∞ 799‚ÇΩ", callback_data="buy")],
        [InlineKeyboardButton("üßæ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫", callback_data="receipt")],
        [InlineKeyboardButton("üÜï –ù–æ–≤–æ–µ", callback_data="new")]
    ]
    if is_admin:
        buttons.append([InlineKeyboardButton("üìù –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞", callback_data="admin_post")])
    return InlineKeyboardMarkup(buttons)

# ‚ñ∂Ô∏è –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    save_user_id(user_id)
    context.user_data["is_admin"] = user_id == OWNER_ID
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n\n–¢—ã –º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å –∫–Ω–∏–≥—É –∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ —Ä–æ–±–æ—Ç—É.",
        reply_markup=main_menu(context.user_data["is_admin"])
    )

# üéõ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "about":
        await query.edit_message_text(
            "üìò *–û –∫–Ω–∏–≥–µ*\n\n"
            "‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ ‚Äî —á–∏—Ç–∞–π –æ–Ω–ª–∞–π–Ω –±–µ–∑ –æ–ø–ª–∞—Ç—ã –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n"
            "‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚Äî –ø–æ–∫—É–ø–∞—è PDF, —Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å –∞–≤—Ç–æ—Ä–æ–≤\n"
            "‚úÖ –£–¥–æ–±—Å—Ç–≤–æ ‚Äî PDF —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞\n"
            "‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ ‚Äî —á–∏—Å—Ç—ã–π —Ñ–∞–π–ª, –±–µ–∑ —Ä–µ–∫–ª–∞–º—ã\n\n"
            "[–ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ —Å–∞–π—Ç–µ](https://treyding.org/premium)",
            parse_mode="Markdown", disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]])
        )
    elif data == "robot":
        await query.edit_message_text(
            "ü§ñ *–û –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ*\n\n"
            "üìå –¢–æ—Ä–≥–æ–≤—ã–π —Ä–æ–±–æ—Ç —Å —à–∞–±–ª–æ–Ω–æ–º —É—Å—Ç–∞–Ω–æ–≤–∫–∏\n"
            "üîÅ –í–æ–∑–≤—Ä–∞—Ç 50% –µ—Å–ª–∏ –∑–∞ –Ω–µ–¥–µ–ª—é —Ç–µ—Å—Ç–∞ –±—É–¥–µ—Ç —Å–ª–∏–≤\n"
            "üìö –í—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ ‚Äî –≤ –æ–¥–Ω–æ–π –∫–Ω–∏–≥–µ\n\n"
            "üí± –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Ä—ã–Ω–∫–µ Forex\n"
            "üí∏ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç ‚Äî 400 $\n"
            "üéØ –¶–µ–ª—å: +30 $ –ø—Ä–∏–±—ã–ª–∏ –≤ –¥–µ–Ω—å\n"
            "‚öôÔ∏è –†–∞–±–æ—Ç–∞ 24/7 –±–µ–∑ —É—á–∞—Å—Ç–∏—è\n"
            "üß† –§–æ–∫—É—Å –Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å, –∞ –Ω–µ —Ä–∏—Å–∫\n\n"
            "–†–æ–±–æ—Ç —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ —Å–±–æ–µ–≤ ‚Äî –Ω–∞–±–ª—é–¥–∞–π, –∫–∞–∫ —Ä–∞—Å—Ç—ë—Ç —Ç–≤–æ–π –∫–∞–ø–∏—Ç–∞–ª.\n\n"
            "[–ü–æ–¥—Ä–æ–±–Ω–µ–µ](https://treyding.org/robot)",
            parse_mode="Markdown", disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="buy_robot")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]
            ])
        )
    elif data == "buy":
        context.user_data["last_button"] = "buy"
        await query.edit_message_text(
            "üí≥ –û–ø–ª–∞—Ç–∞ 799‚ÇΩ –Ω–∞ –∫–∞—Ä—Ç—É 5536 9140 2072 3742 (Ravshan Kayumov).\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏ üßæ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]])
        )
    elif data == "buy_robot":
        context.user_data["last_button"] = "buy_robot"
        await query.edit_message_text(
            "üí≥ –û–ø–ª–∞—Ç–∞ 6000‚ÇΩ –Ω–∞ –∫–∞—Ä—Ç—É 5536 9140 2072 3742 (Ravshan Kayumov).\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏ üßæ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]])
        )
    elif data == "receipt":
        await query.edit_message_text(
            "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ (—Ñ–æ—Ç–æ, —Ç–µ–∫—Å—Ç –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç). –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]])
        )
    elif data == "new":
        await query.edit_message_text("üÜï –ù–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ!", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")]]))
    elif data == "back":
        await query.edit_message_text("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu(context.user_data.get("is_admin", False)))
    elif data == "admin_post":
        if query.from_user.id != OWNER_ID:
            await query.edit_message_text("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã.")
        else:
            context.user_data["awaiting_post"] = True
            await query.edit_message_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª. –ó–∞—Ç–µ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É.")
    elif data == "confirm_post":
        post = context.user_data.get("post_data")
        if not post:
            await query.edit_message_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
            return
        count = 0
        with open("users.txt", "r") as f:
            ids = list(set(f.read().splitlines()))
        for uid in ids:
            try:
                uid_int = int(uid)
                if post["photo"]:
                    await context.bot.send_photo(chat_id=uid_int, photo=post["photo"], caption=post.get("caption", ""))
                elif post["document"]:
                    await context.bot.send_document(chat_id=uid_int, document=post["document"], caption=post.get("caption", ""))
                elif post["text"]:
                    await context.bot.send_message(chat_id=uid_int, text=post["text"])
                count += 1
            except Exception as e:
                logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {uid}: {e}")
        context.user_data["post_data"] = None
        await query.edit_message_text(f"‚úÖ –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    elif data == "cancel_post":
        context.user_data["post_data"] = None
        await query.edit_message_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    elif data.startswith("approve_"):
        parts = data.split("_")
        user_id, kind = int(parts[1]), parts[2]
        if kind == "book":
            with open(PDF_FILE_PATH, "rb") as f:
                await context.bot.send_document(chat_id=user_id, document=InputFile(f, filename="–ê–Ω–∞–ª–∏–∑_—Ä—ã–Ω–∫–∞.pdf"))
            await query.edit_message_text("‚úÖ –ö–Ω–∏–≥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
        elif kind == "robot":
            await context.bot.send_message(chat_id=user_id, text="‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –°—Å—ã–ª–∫–∞: https://treyding.org/vip12\nüéÅ –ö–Ω–∏–≥–∞ –≤ –ø–æ–¥–∞—Ä–æ–∫.")
            await query.edit_message_text("‚úÖ –°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")

# üì§ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (—á–µ–∫–æ–≤ –∏–ª–∏ –ø–æ—Å—Ç–æ–≤)
async def handle_receipt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_id = user.id
    save_user_id(user_id)

    if context.user_data.get("awaiting_post"):
        context.user_data["awaiting_post"] = False
        context.user_data["post_data"] = {
            "text": update.message.text,
            "photo": update.message.photo[-1].file_id if update.message.photo else None,
            "document": update.message.document.file_id if update.message.document else None,
            "caption": update.message.caption
        }
        buttons = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_post")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_post")]
        ])
        if update.message.photo:
            await update.message.reply_photo(photo=update.message.photo[-1].file_id, caption=update.message.caption or "", reply_markup=buttons)
        elif update.message.document:
            await update.message.reply_document(document=update.message.document.file_id, caption=update.message.caption or "", reply_markup=buttons)
        elif update.message.text:
            await update.message.reply_text(update.message.text, reply_markup=buttons)
        return

    kind = "robot" if context.user_data.get("last_button") == "buy_robot" else "book"
    caption = f"üì© –ß–µ–∫ –æ—Ç @{user.username or '–±–µ–∑ username'} (ID: {user_id})"
    reply_markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_{user_id}_{kind}")]
    ])
    await update.message.reply_text("‚úÖ –ß–µ–∫ –ø–æ–ª—É—á–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    if update.message.text:
        await context.bot.send_message(OWNER_ID, caption + ":\n\n" + update.message.text, reply_markup=reply_markup)
    elif update.message.photo:
        await context.bot.send_photo(OWNER_ID, photo=update.message.photo[-1].file_id, caption=caption, reply_markup=reply_markup)
    elif update.message.document:
        await context.bot.send_document(OWNER_ID, document=update.message.document.file_id, caption=caption, reply_markup=reply_markup)

# üìä –ö–æ–º–∞–Ω–¥–∞ /stats
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != OWNER_ID:
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    try:
        with open("users.txt", "r") as f:
            ids = set(f.read().splitlines())
            await update.message.reply_text(f"üìà –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Å–µ–≥–æ: {len(ids)}")
    except FileNotFoundError:
        await update.message.reply_text("üìÇ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –ø—É—Å—Ç.")

# üåê Flask —Å–µ—Ä–≤–µ—Ä –¥–ª—è Replit
app_flask = Flask('')

@app_flask.route('/')
def home():
    return "–ë–æ—Ç –∂–∏–≤! ‚úÖ"

def run():
    app_flask.run(host='0.0.0.0', port=8080)

def keep_alive():
    thread = Thread(target=run)
    thread.start()

# üöÄ –ó–∞–ø—É—Å–∫
def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT | filters.PHOTO | filters.Document.ALL, handle_receipt))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ")
    app.run_polling()

if __name__ == "__main__":
    keep_alive()
    main()
