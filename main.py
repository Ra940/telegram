import logging
import os
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters
)
from flask import Flask
from threading import Thread

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---
TOKEN = "7503402744:AAF7MWB0x_6Eh7AwE3GLdmGLuxkpottqt4s"
OWNER_ID = 7397365971
PDF_FILE_PATH = "book.pdf"

print(f"BOT_TOKEN: {TOKEN}")
logging.basicConfig(level=logging.INFO)

# --- Flask ---
flask_app = Flask(__name__)

@flask_app.route("/")
def index():
    return "–ë–æ—Ç –∂–∏–≤! ‚úÖ"

def run_flask():
    flask_app.run(host="0.0.0.0", port=8080)

# --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
def save_user_id(user_id):
    try:
        with open("users.txt", "r+") as f:
            ids = set(f.read().splitlines())
            if str(user_id) not in ids:
                f.write(str(user_id) + "\n")
    except FileNotFoundError:
        with open("users.txt", "w") as f:
            f.write(str(user_id) + "\n")

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
def main_menu(is_admin=False):
    buttons = [
        [InlineKeyboardButton("üìò –û –∫–Ω–∏–≥–µ", callback_data="about")],
        [InlineKeyboardButton("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è", callback_data="robot")],
        [InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –∑–∞ 799‚ÇΩ", callback_data="buy")],
        [InlineKeyboardButton("üßæ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫", callback_data="receipt")],
        [InlineKeyboardButton("üÜï –ù–æ–≤–æ–µ", callback_data="new")]
    ]
    if is_admin:
        buttons.append([InlineKeyboardButton("üìù –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞", callback_data="admin_post")])
    return InlineKeyboardMarkup(buttons)

# --- –ö–æ–º–∞–Ω–¥—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("üì• –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start")
    user_id = update.effective_user.id
    save_user_id(user_id)
    context.user_data["is_admin"] = user_id == OWNER_ID
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n\n–¢—ã –º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å –∫–Ω–∏–≥—É –∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ —Ä–æ–±–æ—Ç—É.",
        reply_markup=main_menu(context.user_data["is_admin"])
    )

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != OWNER_ID:
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    try:
        with open("users.txt", "r") as f:
            ids = set(f.read().splitlines())
        await update.message.reply_text(f"üìà –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Å–µ–≥–æ: {len(ids)}")
    except FileNotFoundError:
        await update.message.reply_text("üìÇ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –ø—É—Å—Ç.")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "about":
        await query.edit_message_text("üìò –≠—Ç–æ –∫–Ω–∏–≥–∞ –ø–æ —Ç—Ä–µ–π–¥–∏–Ω–≥—É. –ü–æ–ª–µ–∑–Ω–∞—è –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω–∞—è.")
    elif data == "robot":
        await query.edit_message_text("ü§ñ –ù–∞—à —Ç–æ—Ä–≥–æ–≤—ã–π —Ä–æ–±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7 –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.")
    elif data == "buy":
        await query.edit_message_text("üí≥ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ 799‚ÇΩ –Ω–∞ –∫–∞—Ä—Ç—É Ravshan Kayumov, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ ¬´üßæ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫¬ª.")
    elif data == "receipt":
        await query.edit_message_text("üì© –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ñ–æ—Ç–æ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞.")
    elif data == "new":
        await query.edit_message_text("üÜï –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏, —Å–∫–æ—Ä–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!")
    elif data == "admin_post" and update.effective_user.id == OWNER_ID:
        context.user_data["awaiting_post"] = True
        await query.edit_message_text("üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –∏ —è —Ä–∞–∑–æ—à–ª—é –µ–≥–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    else:
        await query.edit_message_text("‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def handle_receipt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if context.user_data.get("awaiting_post") and user_id == OWNER_ID:
        context.user_data["awaiting_post"] = False
        try:
            with open("users.txt", "r") as f:
                ids = set(f.read().splitlines())
            for uid in ids:
                try:
                    await context.bot.send_message(chat_id=int(uid), text=update.message.text)
                except Exception as e:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {uid}: {e}")
            await update.message.reply_text("‚úÖ –ü–æ—Å—Ç —Ä–∞–∑–æ—Å–ª–∞–Ω.")
        except FileNotFoundError:
            await update.message.reply_text("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    await update.message.reply_text("‚úÖ –ß–µ–∫ –ø–æ–ª—É—á–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–±) ---
async def run_bot():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT | filters.PHOTO | filters.Document.ALL, handle_receipt))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await app.run_polling()

if __name__ == "__main__":
    Thread(target=run_flask).start()
    asyncio.run(run_bot())
